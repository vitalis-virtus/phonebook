{"version":3,"file":"static/js/22.e4c30af5.chunk.js","mappings":"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","sources":["webpack://phonebook/./src/component/ContactList/ContactList.module.scss?48bc","component/ContactList/ContactList.js","webpack://phonebook/./src/component/Filter/Filter.module.scss?3604","component/Filter/Filter.js","webpack://phonebook/./src/component/ContactForm/ContactForm.module.scss?a0a4","component/ContactForm/ContactForm.js","webpack://phonebook/./src/view/styles/ContactsView.module.scss?1a14","view/ContactsView.js"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"list__wrapper\":\"ContactList_list__wrapper__2tvMl\",\"list__heading\":\"ContactList_list__heading__o2WVF\",\"list\":\"ContactList_list__PPr5Y\",\"listItem\":\"ContactList_listItem__s-1bm\",\"deleteButton\":\"ContactList_deleteButton__7z7rh\",\"loading\":\"ContactList_loading__FTdQe\",\"name\":\"ContactList_name__ohsAt\",\"number\":\"ContactList_number__ZMN15\",\"spinner_Container\":\"ContactList_spinner_Container__k2P73\"};","import React, { Component } from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./ContactList.module.scss\";\r\n\r\nimport ClipLoader from \"react-spinners/ClipLoader\";\r\n\r\nimport { connect } from \"react-redux\";\r\n\r\nimport { phonebookOperations, phonebookSelectors } from \"../../redux/phonebook\";\r\nclass ContactList extends Component {\r\n  state = {\r\n    contacts: [],\r\n  };\r\n\r\n  componentDidMount() {\r\n    this.props.fetchContacts();\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.list__wrapper}>\r\n        <div className={styles.list__heading}>\r\n          <h4>Name</h4>\r\n          <h4>Phone</h4>\r\n        </div>\r\n\r\n        {this.props.isLoadingContacts && (\r\n          <div className={styles.spinner_Container}>\r\n            <ClipLoader loading={true} cssOverride={{}} size={100} />\r\n          </div>\r\n        )}\r\n        <ul className={styles.list}>\r\n          {this.props.contacts.map((contact) => (\r\n            <li key={contact.id} className={styles.listItem}>\r\n              <p className={styles.name}>{contact.name}</p>\r\n              <p className={styles.number}>{contact.number}</p>\r\n              <button\r\n                type=\"button\"\r\n                onClick={() => this.props.onDeleteContact(contact.id)}\r\n                className={styles.deleteButton}\r\n              >\r\n                <span>Delete</span>\r\n              </button>\r\n            </li>\r\n          ))}\r\n        </ul>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nContactList.propTypes = {\r\n  contacts: PropTypes.arrayOf(PropTypes.object).isRequired,\r\n  onDeleteContact: PropTypes.func.isRequired,\r\n};\r\n\r\nconst mapStateToProps = (state) => ({\r\n  isLoadingContacts: phonebookSelectors.getLoading(state),\r\n});\r\n\r\nconst mapDispatchToProps = (dispatch) => ({\r\n  fetchContacts: () => dispatch(phonebookOperations.fetchContacts()),\r\n});\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactList);\r\n","// extracted by mini-css-extract-plugin\nexport default {\"filter__wrapper\":\"Filter_filter__wrapper__m8eRM\",\"header\":\"Filter_header__ESLtA\",\"label\":\"Filter_label__OZrgp\",\"input\":\"Filter_input__vVlXA\"};","/* eslint-disable no-restricted-globals */\r\nimport React from \"react\";\r\nimport PropTypes from \"prop-types\";\r\nimport styles from \"./Filter.module.scss\";\r\n\r\nconst Filter = ({ contactsLength, value, onChange }) => (\r\n  <>\r\n    {contactsLength > 0 && (\r\n      <div className={styles.filter__wrapper}>\r\n        <h3 className={styles.header}>Find contacts by name</h3>\r\n        <form className={styles.form}>\r\n          <label className={styles.label}>\r\n            <input\r\n              placeholder=\"Filter\"\r\n              autoComplete=\"off\"\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              type=\"text\"\r\n              value={value}\r\n              onChange={(event) => {\r\n                onChange(event.currentTarget.value);\r\n              }}\r\n              className={styles.input}\r\n            />\r\n          </label>\r\n        </form>\r\n      </div>\r\n    )}\r\n  </>\r\n);\r\n\r\nFilter.propTypes = {\r\n  contactsLength: PropTypes.number.isRequired,\r\n  value: PropTypes.string.isRequired,\r\n  onChange: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default Filter;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"contact_form\":\"ContactForm_contact_form__HCH9P\",\"button\":\"ContactForm_button__UjJGT\",\"label\":\"ContactForm_label__Zf+Tp\",\"input\":\"ContactForm_input__42fA3\"};","import React, { Component } from \"react\";\r\nimport styles from \"./ContactForm.module.scss\";\r\nimport PropTypes from \"prop-types\";\r\n\r\nclass ContactForm extends Component {\r\n  state = {\r\n    name: \"\",\r\n    number: \"\",\r\n  };\r\n\r\n  handleChange = (event) => {\r\n    const { name, value } = event.currentTarget;\r\n    this.setState({ [name]: value });\r\n  };\r\n\r\n  handleSubmit = (event) => {\r\n    event.preventDefault();\r\n    this.props.onSubmit(this.state);\r\n    if (this.props.onCloseModal) {\r\n      this.props.onCloseModal();\r\n    }\r\n    this.reset();\r\n  };\r\n\r\n  reset = () => {\r\n    this.setState({ name: \"\", number: \"\" });\r\n  };\r\n\r\n  render() {\r\n    return (\r\n      <div className={styles.contact_form}>\r\n        <h2>Add new contact</h2>\r\n        <form onSubmit={this.handleSubmit} className={styles.test}>\r\n          <label className={styles.label}>\r\n            <input\r\n              type=\"text\"\r\n              name=\"name\"\r\n              value={this.state.name}\r\n              onChange={this.handleChange}\r\n              pattern=\"^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$\"\r\n              title=\"Имя может состоять только из букв, апострофа, тире и пробелов. Например Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan и т. п.\"\r\n              required\r\n              className={styles.input}\r\n              placeholder=\"Name\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </label>\r\n\r\n          <label className={styles.label}>\r\n            <input\r\n              type=\"tel\"\r\n              name=\"number\"\r\n              value={this.state.number}\r\n              onChange={this.handleChange}\r\n              pattern=\"\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}\"\r\n              title=\"Номер телефона должен состоять цифр и может содержать пробелы, тире, круглые скобки и может начинаться с +\"\r\n              required\r\n              className={styles.input}\r\n              placeholder=\"Number\"\r\n              autoComplete=\"off\"\r\n            />\r\n          </label>\r\n          <button type=\"submit\" className={styles.button}>\r\n            Add contact\r\n          </button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nContactForm.propTypes = {\r\n  onSubmit: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default ContactForm;\r\n","// extracted by mini-css-extract-plugin\nexport default {\"app\":\"ContactsView_app__8ulAv\",\"edit_field\":\"ContactsView_edit_field__yQNnN\",\"edit_field_mobile\":\"ContactsView_edit_field_mobile__7xxxs\",\"add_contact\":\"ContactsView_add_contact__sRdfB\",\"filter_contact\":\"ContactsView_filter_contact__Y1cFw\",\"Modal\":\"ContactsView_Modal__r+-Kd\",\"Overlay\":\"ContactsView_Overlay__FrkPI\"};","import React, { useState } from \"react\";\r\nimport ContactList from \"../component/ContactList\";\r\nimport Filter from \"../component/Filter\";\r\nimport ContactForm from \"../component/ContactForm\";\r\nimport { connect } from \"react-redux\";\r\nimport styles from \"./styles/ContactsView.module.scss\";\r\n\r\nimport {\r\n  phonebookOperations,\r\n  phonebookSelectors,\r\n  changeFilter,\r\n} from \"../redux/phonebook\";\r\n\r\nimport Modal from \"react-modal\";\r\nModal.setAppElement(\"#root\");\r\n\r\nconst ContactsView = ({\r\n  getContactsLength,\r\n  visibleContacts,\r\n  filter,\r\n  onChangeFilter,\r\n  onAddContact,\r\n  onDeleteContact,\r\n}) => {\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n\r\n  const openModal = () => setModalIsOpen(true);\r\n  const closeModal = () => setModalIsOpen(false);\r\n\r\n  return (\r\n    <div id=\"ContactsView\" className={styles.app}>\r\n      <div className={styles.edit_field}>\r\n        <ContactForm onSubmit={onAddContact}></ContactForm>\r\n        <Filter\r\n          contactsLength={getContactsLength}\r\n          value={filter}\r\n          onChange={onChangeFilter}\r\n        ></Filter>\r\n      </div>\r\n\r\n      <div className={styles.edit_field_mobile}>\r\n        <button className={styles.add_contact} onClick={openModal}>\r\n          +\r\n        </button>\r\n        <Filter\r\n          contactsLength={getContactsLength}\r\n          value={filter}\r\n          onChange={onChangeFilter}\r\n        ></Filter>\r\n      </div>\r\n\r\n      <Modal\r\n        isOpen={modalIsOpen}\r\n        onRequestClose={closeModal}\r\n        className={styles.Modal}\r\n        contentLabel=\"Example Modal\"\r\n        overlayClassName={styles.Overlay}\r\n      >\r\n        <ContactForm\r\n          onCloseModal={closeModal}\r\n          onSubmit={onAddContact}\r\n        ></ContactForm>\r\n      </Modal>\r\n\r\n      <ContactList\r\n        contacts={visibleContacts}\r\n        onDeleteContact={onDeleteContact}\r\n      ></ContactList>\r\n    </div>\r\n  );\r\n};\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    getContactsLength: phonebookSelectors.getContactsLength(state),\r\n    visibleContacts: phonebookSelectors.getVisibleContacts(state),\r\n    filter: phonebookSelectors.getFilter(state),\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    onAddContact: ({ name, number }) => {\r\n      return dispatch(phonebookOperations.addContact(name, number));\r\n    },\r\n    onDeleteContact: (id) => dispatch(phonebookOperations.deleteContact(id)),\r\n    onChangeFilter: (value) => dispatch(changeFilter(value)),\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(ContactsView);\r\n"],"names":["ContactList","state","contacts","this","props","fetchContacts","className","styles","isLoadingContacts","loading","cssOverride","size","map","contact","name","number","type","onClick","onDeleteContact","id","Component","connect","phonebookSelectors","dispatch","phonebookOperations","contactsLength","value","onChange","placeholder","autoComplete","pattern","title","required","event","currentTarget","ContactForm","handleChange","setState","handleSubmit","preventDefault","onSubmit","onCloseModal","reset","Modal","getContactsLength","visibleContacts","filter","onAddContact","onChangeFilter","changeFilter","useState","modalIsOpen","setModalIsOpen","closeModal","isOpen","onRequestClose","contentLabel","overlayClassName"],"sourceRoot":""}